"""TechChallenge.ipynb
Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/14sKe6cQeIj9SET39S5HwZRXrinsvHbKV
"""

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error
from sklearn.preprocessing import StandardScaler
import seaborn as sns
import matplotlib.pyplot as plt
import scipy.stats as stats
import plotly.express as px

import warnings
warnings.filterwarnings('ignore')

dados = pd.read_csv('./database/insurance.csv')
dados.head()

dados.shape

dados.describe().T

ax = sns.swarmplot(data=dados, x="smoker", y="charges", hue="sex")
ax.set(ylabel="Valor dos Encargos")
plt.title("Distribuição dos Encargos por Status de Fumante e Gênero")
plt.show()

plt.figure(figsize=(14, 12))
ax = sns.swarmplot(data=dados, x="age", y="charges", hue="smoker")
ax.set(ylabel="Valor dos Encargos")
plt.title("Distribuição dos Encargos por Idade e Status de Fumante")
plt.show()

plt.figure(figsize=(14, 12))
ax = sns.swarmplot(data=dados, x="bmi", y="charges", hue="smoker")
ax.set(ylabel="Valor dos Encargos")
plt.title("Distribuição dos Encargos por IMC e Status de Fumante")
plt.show()

plt.subplot(1, 2, 1)
sns.boxplot(x='sex', y='charges', data=dados)
plt.title('Encargos por Gênero')
plt.xticks([0, 1])

plt.subplot(1, 2, 2)
sns.boxplot(x='smoker', y='charges', data=dados)
plt.title('Encargos por Fumante')
plt.xticks([0, 1])

plt.tight_layout()
plt.show()

plt.figure(figsize=(14, 12))

plt.subplot(2, 2, 1)
sns.histplot(dados['age'], kde=True, bins=20, color='blue')
plt.title('Distribuição da Idade')

plt.subplot(2, 2, 2)
sns.histplot(dados['bmi'], kde=True, bins=20, color='green')
plt.title('Distribuição do IMC')

plt.subplot(2, 2, 3)
sns.histplot(dados['children'], kde=True, bins=20, color='orange')
plt.title('Distribuição do Número de Filhos')

plt.subplot(2, 2, 4)
sns.histplot(dados['charges'], kde=True, bins=20, color='red')
plt.title('Distribuição dos Encargos')

plt.tight_layout()
plt.show()

fig = px.violin(dados, y="charges", x="smoker", color="sex", box=True, points="all", title="Distribuição dos Encargos por Status de Fumante e Gênero")
fig.show()

plt.subplot(1, 2, 1)
categorias = ["Não fumante", "Fumante"]
plt.pie(dados["smoker"].value_counts(), labels=categorias, autopct="%0.0f%%", explode=[0, 0.1], colors=("g", "r"))

plt.subplot(1, 2, 2)
categorias = ["Mulher", "Homem"]
plt.pie(dados["sex"].value_counts(), labels=categorias, autopct="%0.0f%%", explode=[0, 0.1], colors=("g", "r"))

plt.tight_layout()
plt.show()

dados['sex'] = dados['sex'].map({'female': 0, 'male': 1})
dados['smoker'] = dados['smoker'].map({'no': 0, 'yes': 1})

dados = pd.get_dummies(dados, columns=['region'])

dados = dados.astype(int)

correlation_matriz = dados.corr().round(2)

fig, ax = plt.subplots(figsize=(14,14))
sns.heatmap(data=correlation_matriz, annot=True, linewidths=5, cmap='coolwarm', ax=ax)
plt.title('Mapa de Calor das Correlações')
plt.show()

X = dados[['age', 'bmi', 'smoker', 'region_northeast', 'region_northwest', 'region_southeast', 'region_southwest']]
y = dados['charges']

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
print(X_train.shape, X_test.shape, y_train.shape, y_test.shape)

scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(X_train)
X_test_scaled = scaler.transform(X_test)

model = LinearRegression()
model.fit(X_train_scaled, y_train)

y_pred = model.predict(X_test_scaled)

erro_medio_quadratico = mean_squared_error(y_test, y_pred)
erro_absoluto_medio = mean_absolute_error(y_test, y_pred)
r_quadrado = r2_score(y_test, y_pred)

print(f'Erro Médio Quadrático: {erro_medio_quadratico}')
print(f'Erro Absoluto Médio: {erro_absoluto_medio}')
print(f'R² (coeficiente de determinação): {r_quadrado}')

plt.figure(figsize=(10, 6))
plt.scatter(y_test, y_pred, color='blue', edgecolor='k', alpha=0.7, s=100)
plt.plot([y_test.min(), y_test.max()], [y_test.min(), y_test.max()], 'r--', lw=3)  # Linha de identidade
plt.legend(['Previsões', 'Valores Reais'])
plt.title('Previsões vs Valores Reais')
plt.grid(True)
plt.show()